import os
import requests
import smtplib
import logging
from datetime import datetime
from bs4 import BeautifulSoup
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from cohere import Client

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Cohere API
client = Client(os.getenv("COHERE_API_KEY"))

def fetch_bbc_thai_rss():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å BBC Thai RSS"""
    url = "https://feeds.bbci.co.uk/thai/rss.xml"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, "xml")
        items = soup.find_all("item")

        headlines = []
        for item in items[:3]:  
            title = item.title.get_text(strip=True)
            description = item.description.get_text(strip=True)
            headlines.append(f"{title} - {description}")
        return headlines
    except Exception as e:
        logger.error(f"Error fetching from BBC RSS: {str(e)}")
        return []

def summarize_news(headlines_list):
    if not headlines_list:
        return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"

    news_text = "\n".join(headlines_list)

    try:
        response = client.chat(
            model="command-r-plus",
            message=f"""‡∏Ç‡πà‡∏≤‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:
{news_text}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢:
1. ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ç‡πà‡∏≤‡∏ß
2. ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (3‡∏Ç‡πâ‡∏≠)
3. ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏ï‡∏•‡∏≤‡∏î/‡∏™‡∏±‡∏á‡∏Ñ‡∏°
4. ‡∏≠‡∏¥‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏≤

‡∏†‡∏≤‡∏©‡∏≤‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á"""
        )

        return response.text.strip()

    except Exception as e:
        logger.error(f"Error in Cohere Chat API: {str(e)}")
        return f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ: {str(e)}\n\n‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡∏¥‡∏ö:\n{news_text}"


def send_email(subject, body):
    try:
        msg = MIMEMultipart()
        msg["Subject"] = subject
        msg["From"] = os.getenv("EMAIL_SENDER")
        msg["To"] = os.getenv("EMAIL_RECEIVER")

        html_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; line-height: 1.6;">
            <div style="max-width: 800px; margin: 0 auto; padding: 20px;">
                <h2 style="color: #2c3e50;">üì∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏à‡∏≤‡∏Å BBC Thai</h2>
                <div style="background-color: #f8f9fa; padding: 15px; border-radius: 5px;">
                    <pre style="white-space: pre-wrap; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">{body}</pre>
                </div>
                <hr>
                <p style="color: #6c757d; font-size: 12px;">
                     ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} (‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢)<br>
                    AI Agent News Summarizer By Natthawee
                </p>
                
            </div>
        </body>
        </html>
        """

        msg.attach(MIMEText(html_body, "html", "utf-8"))

        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(os.getenv("EMAIL_SENDER"), os.getenv("EMAIL_PASSWORD"))
            server.sendmail(
                os.getenv("EMAIL_SENDER"),
                [os.getenv("EMAIL_RECEIVER")],
                msg.as_string()
            )

        logger.info("‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except Exception as e:
        logger.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ: {str(e)}")
        raise

def main():
    try:
        logger.info("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô BBC Thai News Bot")

        required_env = ["COHERE_API_KEY", "EMAIL_SENDER", "EMAIL_RECEIVER", "EMAIL_PASSWORD"]
        missing_env = [env for env in required_env if not os.getenv(env)]

        if missing_env:
            raise ValueError(f"‡∏Ç‡∏≤‡∏î environment variables: {', '.join(missing_env)}")

        logger.info("üì∞ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å BBC Thai...")
        headlines = fetch_bbc_thai_rss()

        if not headlines:
            logger.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å BBC RSS")
            headlines = ["‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"]

        logger.info(f"üìä ‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß {len(headlines)} ‡∏Ç‡πà‡∏≤‡∏ß")
        logger.info("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI...")
        summary = summarize_news(headlines)

        subject = f"üì∞ ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß BBC Thai - {datetime.now().strftime('%d/%m/%Y')}"
        logger.info("üìß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•...")
        send_email(subject, summary)
        logger.info("‚úÖ ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

    except Exception as e:
        error_msg = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
        logger.error(error_msg)
        try:
            send_email("üö® BBC Thai Bot - Error Report", error_msg)
        except:
            pass

if __name__ == "__main__":
    main()